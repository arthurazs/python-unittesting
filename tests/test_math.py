from pu import math


class TestAdd:
    def test_both_positive(self: "TestAdd") -> None:
        # fix this test
        a = 1
        b = 2
        expected = 4
        assert math.add(a, b) == expected

    # remove the `...` and add your test
    def test_a_positive_b_negative(self: "TestAdd") -> None: ...
    def test_a_negative_b_positive(self: "TestAdd") -> None: ...
    def test_both_negative(self: "TestAdd") -> None: ...
    def test_a_0_b_positive(self: "TestAdd") -> None: ...
    def test_a_0_b_negative(self: "TestAdd") -> None: ...
    def test_a_positive_b_0(self: "TestAdd") -> None: ...
    def test_a_negative_b_0(self: "TestAdd") -> None: ...
    def test_both_0(self: "TestAdd") -> None: ...


class TestSubtract:
    # remove the `...` and add your test
    def test_both_positive(self: "TestSubtract") -> None: ...
    def test_a_positive_b_negative(self: "TestSubtract") -> None: ...
    def test_a_negative_b_positive(self: "TestSubtract") -> None: ...
    def test_both_negative(self: "TestSubtract") -> None: ...
    def test_a_0_b_positive(self: "TestSubtract") -> None: ...
    def test_a_0_b_negative(self: "TestSubtract") -> None: ...
    def test_a_positive_b_0(self: "TestSubtract") -> None: ...
    def test_a_negative_b_0(self: "TestSubtract") -> None: ...
    def test_both_0(self: "TestSubtract") -> None: ...


class TestMultiply:
    # remove the `...` and add your test
    def test_both_positive(self: "TestMultiply") -> None: ...
    def test_a_positive_b_negative(self: "TestMultiply") -> None: ...
    def test_a_negative_b_positive(self: "TestMultiply") -> None: ...
    def test_both_negative(self: "TestMultiply") -> None: ...
    def test_a_0_b_positive(self: "TestMultiply") -> None: ...
    def test_a_0_b_negative(self: "TestMultiply") -> None: ...
    def test_a_positive_b_0(self: "TestMultiply") -> None: ...
    def test_a_negative_b_0(self: "TestMultiply") -> None: ...
    def test_both_0(self: "TestMultiply") -> None: ...


class TestDivide:
    # remove the `...` and add your test
    def test_both_positive(self: "TestDivide") -> None: ...
    def test_a_positive_b_negative(self: "TestDivide") -> None: ...
    def test_a_negative_b_positive(self: "TestDivide") -> None: ...
    def test_both_negative(self: "TestDivide") -> None: ...
    def test_a_0_b_positive(self: "TestDivide") -> None: ...
    def test_a_0_b_negative(self: "TestDivide") -> None: ...
    def test_a_positive_b_0(self: "TestDivide") -> None: ...
    def test_a_negative_b_0(self: "TestDivide") -> None: ...
    def test_both_0(self: "TestDivide") -> None: ...


class TestSquareRoot:
    # remove the `...` and add your test
    def test_positive(self: "TestSquareRoot") -> None: ...
    def test_negative(self: "TestSquareRoot") -> None: ...
    def test_zero(self: "TestSquareRoot") -> None: ...


class TestDouble:
    def test_positive(self: "TestDouble") -> None:
        if False:  # remove this if and add the math.double function
            expected = 6
            a = 3
            assert math.double(a) == expected

    # remove the `...` and add your test
    def test_negative(self: "TestDouble") -> None: ...
    def test_zero(self: "TestDouble") -> None: ...
